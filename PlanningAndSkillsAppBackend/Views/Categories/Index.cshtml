@model IEnumerable<Model.CategoryModels.CategoryModel>

@{
    ViewData["Title"] = "Categories";
}

<div class="categories-page">
    <div class="header">
        <h1>@ViewData["Title"]</h1>
        <a href="#" id="openCreateModal" class="new-category-btn">New category</a>
    </div>

    <div class="category-list">
        @foreach (var cat in Model)
        {
            <a asp-action="CategoryDetails"
               asp-route-id="@cat.Id"
               asp-controller="Categories"
               class="category-card">
                @cat.Name
            </a>
        }
    </div>
</div>

<!-- Modal Overlay -->
<div id="createCategoryModal" class="modal-overlay" style="display:none;">
    <div class="modal">
        <header class="modal-header">
            <h2>New category</h2>
            <button type="button" class="close-modal">&times;</button>
        </header>
        <section class="modal-body">
            @* Render the Create form as a partial *@
            @await Html.PartialAsync("_CategoryFormPartial", new Model.CategoryModels.CategoryModel())
        </section>
    </div>
</div>

@section Styles {
    <style>
        .categories-page {
            padding: 1rem;
        }

        .header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 1.5rem;
        }

        .new-category-btn {
            display: inline-block;
            padding: 0.7rem 1rem;
            background-color: #7766C6;
            color: #FFF;
            border-radius: 9999px;
            text-decoration: none;
            font-weight: 500;
            box-shadow: 0 2px 6px rgba(0,0,0,0.15);
            transition: background-color 0.2s, box-shadow 0.2s;
            border-radius: 15px
        }

            .new-category-btn:hover {
                background-color: #5540B9;
                box-shadow: 0 4px 12px rgba(0,0,0,0.2);
            }

        .category-list {
            display: flex;
            gap: 1rem;
            flex-wrap: wrap;
        }

        .category-card {
            display: block;
            padding: 1rem 1.5rem;
            background: #FFFFFF;
            border-radius: 1rem;
            box-shadow: 0 2px 12px rgba(0,0,0,0.08);
            text-decoration: none;
            color: #1F2937;
            font-weight: 500;
            transition: box-shadow 0.2s, transform 0.2s;
        }

            .category-card:hover {
                box-shadow: 0 4px 16px rgba(0,0,0,0.12);
                transform: translateY(-2px);
            }

        /* --- Modal Styles --- */
        .modal-overlay {
            position: fixed;
            top: 0;
            left: 0;
            width: 100vw;
            height: 100vh;
            background: rgba(0,0,0,0.5);
            display: flex;
            align-items: center;
            justify-content: center;
            z-index: 1000;
        }

        .modal {
            background: #fff;
            border-radius: 0.5rem;
            max-width: 500px;
            width: 90%;
            box-shadow: 0 2px 12px rgba(0,0,0,0.3);
            overflow: hidden;
        }

        .modal-header {
            padding: 1rem;
            display: flex;
            justify-content: space-between;
            align-items: center;
            border-bottom: 1px solid #e5e5e5;
        }

        .modal-body {
            padding: 1rem;
        }

        .close-modal {
            background: none;
            border: none;
            font-size: 1.5rem;
            line-height: 1;
            cursor: pointer;
        }
    </style>
}

@section Scripts {
    <script>
        (function() {
          const openBtn    = document.getElementById('openCreateModal');
          const modalOverlay = document.getElementById('createCategoryModal');
          const closeBtns  = modalOverlay.querySelectorAll('.close-modal');
          const form       = document.getElementById('createCategoryForm');

          // Open modal
          openBtn.addEventListener('click', e => {
            e.preventDefault();
            modalOverlay.style.display = 'flex';
          });

          // Close modal (header × button)
          closeBtns.forEach(btn =>
            btn.addEventListener('click', () =>
              modalOverlay.style.display = 'none'
            )
          );

          // Close modal by clicking outside
          modalOverlay.addEventListener('click', e => {
            if (e.target === modalOverlay) {
              modalOverlay.style.display = 'none';
            }
          });

          // AJAX submit
          form.addEventListener('submit', function(e) {
            e.preventDefault();
            const data = new FormData(form);
            fetch(form.action, {
              method: 'POST',
              body: data,
              headers: { 'X-Requested-With': 'XMLHttpRequest' }
            })
            .then(resp => {
              if (!resp.ok) throw new Error('Server error');
              // on success, reload to show new category
              window.location.reload();
            })
            .catch(err => {
              console.error(err);
              alert('Could not create category.');
            });
          });
        })();
    </script>
}
